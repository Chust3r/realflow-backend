datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//→ AUTH JS MODELS 

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  channels      Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

//→ REALFLOW MODELS 

model Channel {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user_id     String

  //→ RELATIONS

  conversations Conversation[]
  user          User              @relation(fields: [user_id], references: [id])
  requests      Request[]
  API_tokens    ChannelAPIToken[]
}

enum APITokenPermission {
  READ
  WRITE
  DELETE
}

model ChannelAPIToken {
  id          String               @id @default(cuid())
  channel_id  String
  value       String
  name        String
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  expires     DateTime
  permissions APITokenPermission[]

  //→ RELATIONS

  channel Channel @relation(fields: [channel_id], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String        @id @default(uuid())
  is_group     Boolean       @default(false)
  name         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  participants Participant[]
  messages     Message[]
  channel_id   String?

  //→ RELATIONS

  channel Channel? @relation(fields: [channel_id], references: [id])
}

enum ParticipantRole {
  ADMIN
  MODERATOR
  MEMBER
}

model Participant {
  id              String          @id @default(uuid())
  user_id         String
  conversation_id String
  joined_at       DateTime        @default(now())
  role            ParticipantRole @default(MEMBER)

  //→ RELATIONS

  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  messages     Message[]
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  AUDIO
  VIDEO
}

model Message {
  id              String      @id @default(uuid())
  conversation_id String
  sender_id       String
  type            MessageType @default(TEXT)
  content         String
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  is_deleted      Boolean     @default(false)
  is_edited       Boolean     @default(false)
  attachment_url  String?

  //→ RELATIONS

  conversation Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender       Participant  @relation(fields: [sender_id], references: [id], onDelete: Cascade)
}

//→ REALFLOW METRICS MODELS 

model Request {
  id            String   @id @default(cuid())
  user_agent    String
  is_authorized Boolean  @default(false)
  created_at    DateTime @default(now())
  channel_id    String
  ip_address    String?

  //→ RELATIONS

  channel Channel? @relation(fields: [channel_id], references: [id])
  metrics Metric?
}

enum MetricStatus {
  OPEN
  CLOSED
  ERROR
}

model Metric {
  id                String       @id @default(cuid())
  channel_id        String
  created_at        DateTime     @default(now())
  request_id        String       @unique
  proccesing_time   Int
  connection_status MetricStatus
  error_message     String?
  connected_users   Int

  //→ RELATIONS

  request Request @relation(fields: [request_id], references: [id])
}
